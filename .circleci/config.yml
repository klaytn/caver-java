version: 2.1

defaults: &defaults
  working_directory: ~/circleci-caver-java-major
  docker:
    - image: circleci/openjdk:8-jdk-browsers

machine_ubuntu: &machine_ubuntu
  working_directory: ~/circleci-caver-java-major
  machine:
    image: ubuntu-2004:202010-01

android_machine_ubuntu: &android_machine_ubuntu
  working_directory: ~/circleci-caver-java-android
  machine:
    image: android:202102-01
  resource_class: large

commands:
  notify-success:
    steps:
      - run:
          name: "notify slack when job success"
          command : |
            curl --data '{"text": "✅ Job *'$CIRCLE_JOB'* succeeded on *'$CIRCLE_BRANCH''$CIRCLE_TAG'*. Please see '$CIRCLE_BUILD_URL' for details."}' "$SLACK_WEBHOOK_URL"
          when: on_success
  notify-failure:
    steps:
      - run:
          name: "notify slack when job fail"
          command : |
            curl --data '{"text": "❌ Job *'$CIRCLE_JOB'* failed on *'$CIRCLE_BRANCH''$CIRCLE_TAG'*. Please see '$CIRCLE_BUILD_URL' for details."}' "$SLACK_WEBHOOK_URL"
          when: on_fail

setup_android_test_files: &setup_android_test_files
  run:
    name: "Setup android instrumented test environment"
    command: |
        bash .circleci/setup_android_instrumented_test.sh

adb_logging: &adb_logging
  run:
    name: "Start Logging of android emulator"
    command: |
      adb logcat > adb.log
    background: true

pull_klaytn_image: &pull_klaytn_image
  run:
    name: "Pull and tag Klaytn image"
    command: |
        docker pull klaytn/build_base:latest
        docker image tag klaytn/build_base:latest klaytn

check_test_network: &check_test_network
  run:
    name: "Check test network"
    command: |
        MAXRETRY=600
        RETRY=0
        while [ $RETRY -lt $MAXRETRY ]
        do
            if curl --fail -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method":"rpc_modules","params":[],"id":1}' http://localhost:8551 2>/dev/null; then
                echo "Klaytn RPC server is up"
                break
            else
                echo "wait for Klyatn RPC server..."
                sleep 5
            fi
            RETRY=$(($RETRY+5))
        done
        if [ $RETRY -eq $MAXRETRY ]; then
            echo "failed to connect Klaytn RPC server"
            exit 1
        fi

start_test_network: &start_test_network
  run:
    name: "Start test network"
    working_directory: .circleci/images
    command: |
        docker-compose up -d

build_test: &build_test
  run:
    name: "Build"
    command: |
        ./gradlew clean
        ./gradlew build --debug -x test

build_test_android: &build_test_android
  run:
    name: "Build android"
    command: |
      ./gradlew clean
      ./gradlew build --debug -x test

include_android_instrumented_test_as_subproject: &include_android_instrumented_test_as_subproject
  run:
    name: "Insert phrase `include 'android_instrumented_test'` at the end of the `settings.gradle`."
    command: |
      sed -i -e '$ainclude '\''android_instrumented_test'\''' settings.gradle

check_android_version: &check_android_version
  run:
    name: "Change to Android version"
    command: |
      version=$(.circleci/version.sh)
      sed -i "s/version '.*'/version '${version}-android'/" build.gradle
      sed -i "s/java.util.concurrent.CompletableFuture/java8.util.concurrent.CompletableFuture/" core/src/test/java/com/klaytn/caver/legacy/scenario/FastTransactionManagerIT.java

      if [ -z "$CIRCLE_TAG" ]; then
        echo "this is not RC version"
      else
        echo "trigger CIRCLE_TAG $CIRCLE_TAG"
        sed -i "s/version '.*'/version '${CIRCLE_TAG:1}-android'/" build.gradle
        sed -i "s/java.util.concurrent.CompletableFuture/java8.util.concurrent.CompletableFuture/" core/src/test/java/com/klaytn/caver/legacy/scenario/FastTransactionManagerIT.java
      fi

      awk '/version '\''/' build.gradle
      awk '/ext.web3jVersion = '\''/' build.gradle

jobs:
  docs_test:
    <<: *machine_ubuntu
    steps:
      - checkout
      - run:
          name: "Docs Test"
          command: ./gradlew javadoc

  unit_test:
    <<: *machine_ubuntu
    steps:
      - checkout
      - *pull_klaytn_image
      - *start_test_network
      - *check_test_network
      - run:
          name: "Check environment"
          command: java --version && gradle --version
      - run:
          name: "Test"
          command: ./gradlew clean test --debug --scan
      - store_test_results:
          path: core/build/test-results/test
      - store_artifacts:
          path: /home/circleci/circleci-caver-java-major/core/build/reports/tests/test/index.html
          destination: index.html


  build_test:
    <<: *machine_ubuntu
    steps:
      - checkout
      - run:
          name: "Check rc version"
          command: |
            if [ -z "$CIRCLE_TAG" ]; then
              echo "this is not RC version"
            else
              sed -i "s/version '.*'/version '${CIRCLE_TAG:1}'/" build.gradle
              awk '/version '\''/' build.gradle
            fi
      - *build_test

  unit_test_android:
    <<: *android_machine_ubuntu
    steps:
      - checkout
      - *include_android_instrumented_test_as_subproject
      - *setup_android_test_files
      - *pull_klaytn_image
      - *start_test_network
      - *check_test_network
      - *check_android_version
      - run:
          name: Create avd
          command: |
            SYSTEM_IMAGES="system-images;android-29;default;x86"
            sdkmanager "$SYSTEM_IMAGES"
            echo "no" | avdmanager --verbose create avd -n test -k "$SYSTEM_IMAGES"
      - run:
          name: Launch emulator
          command: |
            emulator -avd test -delay-adb -verbose -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim
          background: true
      - run:
          name: Wait for emulator to start
          command: |
            circle-android wait-for-boot
      - run:
          name: Disable emulator animations
          command: |
            adb shell settings put global window_animation_scale 0.0
            adb shell settings put global transition_animation_scale 0.0
            adb shell settings put global animator_duration_scale 0.0
      - *adb_logging
      - run:
          name: Run instrumented test on android emulator
          no_output_timeout: 20m
          command: ./gradlew connectedDebugAndroidTest --debug --stacktrace
      - store_test_results:
          path: android_instrumented_test/build/outputs/androidTest-results/connected

  build_test_android:
    <<: *android_machine_ubuntu
    steps:
      - checkout
      - *check_android_version
      - *build_test_android

  tag_verify:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: "Verify tag and file verison match"
          command: |
            echo "tag version is " $CIRCLE_TAG

            file_version=v$(.circleci/version.sh)
            echo "file version is " $file_version

            if [ $file_version == ${CIRCLE_TAG%-*} ]; then
              echo "verification pass"
            else
              echo "It's not same version."
              exit 1
            fi

  tagger_verify:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: "Verify tag and file verison match"
          command: |
            TAGGER=$(git for-each-ref --format='%(tagger)' refs/tags/$CIRCLE_TAG | sed 's/ .*//')
            if [ $TAGGER == 'circleci-klaytn' ]; then
              echo "Pass! Tagger is circleci-klaytn"
            else
              echo "only circleci-klaytn can tagging major version"
              exit 1
            fi

  release_PR:
    <<: *defaults
    steps:
      - add_ssh_keys
      - checkout
      - run:
          name: "Push to release branch"
          command: |
              echo "push to release branch: /release/${CIRCLE_TAG%-*}"
              git checkout -b release/${CIRCLE_TAG%-*}
              git push origin release/${CIRCLE_TAG%-*}
      - run:
          name: "Install hub" 
          command: |
              curl -sSLf https://github.com/github/hub/releases/download/v2.12.3/hub-linux-amd64-2.12.3.tgz | \
                tar zxf - --strip-components=1 -C /tmp && \
                sudo mv /tmp/bin/hub /usr/local/bin/hub
              type hub
      - run:
          name: "Create pull request" 
          command: |
              version=$(hub pr list -s open -L 10 -f "%H%n")
              echo $version

              if [[ $version == *"release/${CIRCLE_TAG%-*}"* ]]; then
                echo "PR already exist"
              else
                echo "hub pull-request -m "[Master] release/$CIRCLE_TAG QA Signoff" -b $CIRCLE_PROJECT_USERNAME:master -h $CIRCLE_PROJECT_USERNAME:${CIRCLE_TAG%-*}"
                echo -e "[Master] release/${CIRCLE_TAG%-*} QA Sign-off\n\nThis PR is automatically created by CI to release a new official version of $CIRCLE_PROJECT_REPONAME.\n\nWhen this PR is approved by QA team, a new version will be released." | hub pull-request -b $CIRCLE_PROJECT_USERNAME:master -h $CIRCLE_PROJECT_USERNAME:release/${CIRCLE_TAG%-*} -r $GITHUB_reviewer -l circleci -F-
              fi

  major_tagging:
    <<: *defaults
    steps:
      - add_ssh_keys
      - checkout
      - run:
          name: "Generate tag"
          command: |
              current_version=$(.circleci/version.sh)
              echo "git tag v$current_version"
              git config --global user.email "team.devops@groundx.xyz"
              git config --global user.name "circleci-klaytn"
              git tag -a v$current_version -m "$CIRCLE_STAGE"
              git push origin v$current_version
      - run:
          name: "Delete release branch"
          command: |
              #delete release branch. it trigger by merge title
              version=v$(.circleci/version.sh)

              if [[ "release/v" = $(git log --oneline -1 | grep -o "release/v") ]]; then
                echo "Delete branch release/$version"
                git push origin --delete release/$version
              else
                echo "Need to delete branch manually"
              fi  

  major_publish:
    <<: *machine_ubuntu
    steps:
      - checkout
      - run:
          name: "Check rc version"
          command: |
            if [ -z "$CIRCLE_TAG" ]; then
              echo "this is not RC version"
            else
              sed -i "s/version '.*'/version '${CIRCLE_TAG:1}'/" build.gradle
              awk '/version '\''/' build.gradle
            fi
      - run:
          name: "Publish major version"
          command: |
              version=v$(.circleci/version.sh)
              echo "Publishing a major release! version=$version"
              ./gradlew clean publish --stacktrace --debug
              ./gradlew closeAndReleaseRepository --stacktrace --debug
      - notify-failure
      - notify-success

  android_publish:
    <<: *android_machine_ubuntu
    steps:
      - checkout
      - *check_android_version
      - run:
          name: "Publish android version"
          command: |
              version=v$(.circleci/version.sh)
              echo "Publishing a major android release! version=$version"
              ./gradlew clean publish --stacktrace --debug
              ./gradlew closeAndReleaseRepository --stacktrace --debug
      - notify-failure
      - notify-success

stage_defaults:
  default: &stage_default
    filters:
      tags:
        only:
          - /^v[0-9]+\.[0-9]+\.[0-9]+-rc\.[0-9]+.*/
          - /^v[0-9]+\.[0-9]+\.[0-9]+.*/
      branches:
        ignore: 
          - /release\/.*/
          - master
  tests: &test_steps
    requires:
      - tag_verify
      - tagger_verify
      - unit_test
      - unit_test_android
      - build_test
      - build_test_android
      - docs_test
  publish: &stage_publish
    filters:
      tags:
        only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
      branches:
        ignore: /.*/

workflows:
  version: 2
  workflow_build_deploy:
    jobs:
    - docs_test:
        <<: *stage_default
    - unit_test:
        <<: *stage_default
    - unit_test_android:
        <<: *stage_default
    - build_test:
        <<: *stage_default
    - build_test_android:
        <<: *stage_default

    - tag_verify:
        <<: *stage_publish

    - tagger_verify:
        filters:
          tags:
            only: /^v[0-9]+\.[0-9]+\.[0-9]+/
          branches:
            ignore: /.*/

    - release_PR:
        requires:
          - major_publish
        filters:
          tags:
            only: /^v[0-9]+\.[0-9]+\.[0-9]+-rc.*/
          branches:
            ignore: /.*/

    - major_tagging:
        filters:
          branches:
            only: master
          
    - android_publish:
        <<: *test_steps
        <<: *stage_publish

    - major_publish:
        <<: *test_steps
        <<: *stage_publish
        requires:
          - android_publish